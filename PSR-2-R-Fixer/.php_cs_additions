<?php
use Symfony\CS\AbstractFixer;
use Symfony\CS\Tokenizer\Token;
use Symfony\CS\Tokenizer\Tokens;

// Some PHP 5.5 tokens, replicated for lower versions.
if (defined('T_FINALLY') === false) {
	define('T_FINALLY', 1059);
}
if (defined('T_YIELD') === false) {
	define('T_YIELD', 1065);
}
// Some PHP 5.6 tokens, replicated for lower versions.
if (defined('T_ELLIPSIS') === false) {
	define('T_ELLIPSIS', 1066);
}

define('T_OPEN_CURLY_BRACKET', 1000);
define('T_CLOSE_CURLY_BRACKET', 1001);
define('T_OPEN_SQUARE_BRACKET', 1002);
define('T_CLOSE_SQUARE_BRACKET', 1003);
define('T_OPEN_PARENTHESIS', 1004);
define('T_CLOSE_PARENTHESIS', 1005);
define('T_COLON', 1006);
define('T_STRING_CONCAT', 1007);
define('T_INLINE_THEN', 1008);
define('T_INLINE_ELSE', 1009);
define('T_NULL', 1010);
define('T_FALSE', 1011);
define('T_TRUE', 1012);
define('T_SEMICOLON', 1013);
define('T_EQUAL', 1014);
define('T_MULTIPLY', 1015);
define('T_DIVIDE', 1016);
define('T_PLUS', 1017);
define('T_MINUS', 1018);
define('T_MODULUS', 1019);
define('T_POWER', 1020);
define('T_BITWISE_AND', 1021);
define('T_BITWISE_OR', 1022);
define('T_ARRAY_HINT', 1023);
define('T_GREATER_THAN', 1024);
define('T_LESS_THAN', 1025);
define('T_BOOLEAN_NOT', 1026);
define('T_SELF', 1027);
define('T_PARENT', 1028);
define('T_DOUBLE_QUOTED_STRING', 1029);
define('T_COMMA', 1030);
define('T_HEREDOC', 1031);
define('T_PROTOTYPE', 1032);
define('T_THIS', 1033);
define('T_REGULAR_EXPRESSION', 1034);
define('T_PROPERTY', 1035);
define('T_LABEL', 1036);
define('T_OBJECT', 1037);
define('T_COLOUR', 1038);
define('T_HASH', 1039);
define('T_URL', 1040);
define('T_STYLE', 1041);
define('T_ASPERAND', 1042);
define('T_DOLLAR', 1043);
define('T_TYPEOF', 1044);
define('T_CLOSURE', 1045);
define('T_BACKTICK', 1046);
define('T_START_NOWDOC', 1047);
define('T_NOWDOC', 1048);
define('T_END_NOWDOC', 1049);
define('T_OPEN_SHORT_ARRAY', 1050);
define('T_CLOSE_SHORT_ARRAY', 1051);
define('T_GOTO_LABEL', 1052);

/**
 */
class CommaSpacingFixer extends AbstractFixer {

	/**
	 * {@inheritdoc}
	 */
	public function getDescription() {
		return 'Add space after comma in lists';
	}

	/**
	 * {@inheritdoc}
	 */
	public function fix(\SplFileInfo $file, $content) {
		$tokens = Tokens::fromCode($content);

		for ($index = $tokens->count() - 1; $index >= 0; --$index) {
			$token = $tokens[$index];
			if (trim($token->getContent()) === '') {
				continue;
			}

			$prevIndex = $tokens->getPrevNonWhitespace($index);
			if (!$prevIndex) {
				continue;
			}
			$prevToken = $tokens[$prevIndex];
			$content = $prevToken->getContent();
			if ($content !== ',') {
				continue;
			}

			if ($prevIndex === $index - 1) {
				// We need to add a space
				$tokens->insertAt($index, new Token(array(T_WHITESPACE, ' ')));
				//$token->setContent(' ' . $token->getContent());
			}
		}

		return $tokens->generateCode();
	}

	public function getLevel() {
		return 0;

	}
}

/**
 * @author Ceeram <ceeram@cakephp.org>
 */
class PhpdocIndentFixer extends AbstractFixer
{
	/**
	 * {@inheritdoc}
	 */
	public function fix(\SplFileInfo $file, $content)
	{
		$tokens = Tokens::fromCode($content);

		foreach ($tokens->findGivenKind(T_DOC_COMMENT) as $index => $token) {
			$next = $tokens->getNextMeaningfulToken($index);
			if (null === $next) {
				continue;
			}

			$indent = $this->calculateIndent($tokens[$next - 1]->getContent());

			$prevToken = $tokens[$index - 1];

			$prevToken->setContent($this->fixWhitespaceBefore($prevToken->getContent(), $indent));

			$token->setContent($this->fixDocBlock($token->getContent(), $indent));
		}

		return $tokens->generateCode();
	}

	/**
	 * {@inheritdoc}
	 */
	public function getDescription()
	{
		return 'Docblocks should have the same indentation as the documented subject.';
	}

	/**
	 * Fix indentation of Docblock.
	 *
	 * @param string $content Docblock contents
	 * @param string $indent  Indentation to apply
	 *
	 * @return string Dockblock contents including correct indentation
	 */
	private function fixDocBlock($content, $indent)
	{
		return ltrim(preg_replace('/^[ \t]*/m', $indent.' ', $content));
	}

	/**
	 * Fix whitespace before the Docblock.
	 *
	 * @param string $content Whitespace before Docblock
	 * @param string $indent  Indentation of the documented subject
	 *
	 * @return string Whitespace including correct indentation for Dockblock after this whitespace
	 */
	private function fixWhitespaceBefore($content, $indent)
	{
		return rtrim($content, " \t").$indent;
	}

	/**
	 * Calculate used indentation from the whitespace before documented subject.
	 *
	 * @param string $content Whitespace before documented subject
	 *
	 * @return string
	 */
	private function calculateIndent($content)
	{
		return ltrim(strrchr(str_replace(array("\r\n", "\r"), "\n", $content), 10), "\n");
	}

	public function getLevel() {
		return 0;
	}

}

class PhpdocFixer extends AbstractFixer {

	public function fix(\SplFileInfo $file, $content) {
		$tokens = Tokens::fromCode($content);

		//file_put_contents('te.txt', var_export($tokens, true)); die();

		/*
		foreach ($tokens->findGivenKind(370) as $index => $token) {
			$this->_correctToken($token);
		}
		*/

		foreach ($tokens->findGivenKind(T_DOC_COMMENT) as $index => $token) { // , 370
			$this->_correctToken($token);
		}

		return $tokens->generateCode();
	}

	public function getLevel() {
		return 0;
	}

	public function getDescription() {
		return 'Usage of Yoda conditions is not advised. Switch the expression order.';
	}

	protected function _correctToken(&$token) {
		$content = $token->getContent();

		if (!preg_match('|^\\/*|', $content)) {
			die(var_dump($token));
			return;
		}

		//die(var_dump($token));
		$content = preg_replace('|^(\s*)/([*]+)|m', '\1/**', $content);
		$content = preg_replace('|^(\s*)[*]+/$|m', '\1*/', $content);
		if (!$content) {
			// Sth went wrong
			return;
		}
		//var_dump($token->getContent()); die(var_dump($content));
		$token->setContent($content);
	}

}

class ConditionalExpressionOrderFixer extends AbstractFixer {

	public function fix(\SplFileInfo $file, $content) {
		$tokens = Tokens::fromCode($content);

		$this->_fixConditions($tokens);
		return $tokens->generateCode();
	}

	protected function _fixConditions(&$tokens) {
		foreach ($tokens as $index => $token) {
			if ($token->getContent() !== '(') {
				continue;
			}

			// Look for the first expression
			$leftIndex = $tokens->getNextMeaningfulToken($index);
			if (!$leftIndex || $tokens[$leftIndex]->getContent() === ')') {
				continue;
			}

			// Only sniff for specified tokens
			if (!$tokens[$leftIndex]->isNativeConstant()
				&& !in_array($tokens[$leftIndex]->getId(), array(T_LNUMBER, T_CONSTANT_ENCAPSED_STRING))
				//&& !$tokens[$leftIndex]->getContent() !== '-'
			) {
				continue;
			}
			$leftIndexStart = $leftIndex;

			/*
			if ($tokens[$leftIndex]->getId() === T_MINUS) {
				if ($tokens[$leftIndex + 1]->getId() !== T_LNUMBER) {
					//$error = 'Usage of Yoda conditions is not advised. Please switch the expression order.';
					//$phpcsFile->addError($error, $stackPtr, 'ExpressionOrder');
					//return;
				}
				//$leftIndex = $leftIndex + 1;
			}
			*/

			// Get the comparison operator
			$comparisonIndex = $tokens->getNextMeaningfulToken($leftIndex);

			// Fix incomplete token parsing
			if ($tokens[$comparisonIndex]->getContent() === '<') {
				$tokens[$comparisonIndex]->override(array(T_LESS_THAN, '<', $tokens[$comparisonIndex]->getLine()));
			}
			if ($tokens[$comparisonIndex]->getContent() === '>') {
				$tokens[$comparisonIndex]->override(array(T_GREATER_THAN, '>', $tokens[$comparisonIndex]->getLine()));
			}

			//die(var_dump($tokens[$comparisonIndex]));
			$tokensToCheck = array(T_IS_IDENTICAL, T_IS_NOT_IDENTICAL, T_IS_EQUAL, T_IS_NOT_EQUAL, T_GREATER_THAN, T_LESS_THAN,
				T_IS_GREATER_OR_EQUAL, T_IS_SMALLER_OR_EQUAL);
			if (!in_array($tokens[$comparisonIndex]->getId(), $tokensToCheck)) {
				continue;
			}

			// Look for the right expression
			$rightIndex = $tokens->getNextMeaningfulToken($comparisonIndex);
			if (!$rightIndex) {
				$error = 'Usage of Yoda conditions is not advised. Please switch the expression order.';
				$phpcsFile->addError($error, $stackPtr, 'ExpressionOrder');
				continue;
			}

			$rightIndexStart = $rightIndex;

			// If its T_OPEN_PARENTHESIS we need to find the closing one
			if ($tokens[$rightIndex]->getContent() === '(') {
				// skip for now
				continue;

				//TODO:
				//$rightIndex = $tokens[$rightIndex]['parenthesis_closer'];
			}

			// Check if we need to inverse comparison operator
			$comparisonIndexValue = $tokens[$comparisonIndex]->getContent();
			if (in_array($tokens[$comparisonIndex]->getId(), array(T_GREATER_THAN, T_LESS_THAN,
				T_IS_GREATER_OR_EQUAL, T_IS_SMALLER_OR_EQUAL))) {
				$mapping = array(
					T_GREATER_THAN => '<',
					T_LESS_THAN => '>',
					T_IS_GREATER_OR_EQUAL => '<=',
					T_IS_SMALLER_OR_EQUAL => '>='
				);
				$comparisonIndexValue = $mapping[$tokens[$comparisonIndex]->getId()];
			}

			$rightIndexEnd = $tokens->getNextMeaningfulToken($rightIndexStart);
			if (!$rightIndex || $tokens[$rightIndexEnd]->getContent() !== ')') {
				// skip for now
				continue;
			}

			// Fix the error

			$tmp = '';
			for ($i = $leftIndexStart; $i <= $leftIndex; $i++) {
				$tmp .= $tokens[$i]->getContent();
			}
			$rightIndexValue = $tokens[$rightIndex]->getContent();

			for ($i = $leftIndexStart; $i < $rightIndexStart; $i++) {
				$tokens[$i]->setContent('');
			}
			$tokens[$rightIndex]->setContent($rightIndexValue. ' ' . $comparisonIndexValue . ' ' . $tmp);
		}
	}

	public function getLevel() {
		return 0;
	}

	public function getDescription() {
		return 'Usage of Yoda conditions is not advised. Switch the expression order.';
	}

}

class IsWritableFixer extends AbstractFixer {

	public function fix(\SplFileInfo $file, $content) {
		$tokens = Tokens::fromCode($content);
		foreach ($tokens as $index => $token) {
			if ($token->getContent() !== 'is_writeable') {
				continue;
			}

			$wrongTokens = array(T_FUNCTION, 359); // 359 = ->

			$prevIndex = $tokens->getPrevNonWhitespace($index);
			if (in_array($tokens[$prevIndex]->getId(), $wrongTokens, true)) {
				continue;
			}

			//file_put_contents('te.txt', var_export($tokens, true)); die();

			$next = $tokens->getNextMeaningfulToken($index);
			if ($tokens[$next]->getContent() !== '(') {
				continue;
			}

			// Don't use is_writeable()
			$tokens[$index]->setContent('is_writable');
		}

		return $tokens->generateCode();
	}

	public function getLevel() {
		return 0;
	}

	public function getDescription() {
		return 'Use short form is_int() instead of is_integer().';
	}

}

class IsIntFixer extends AbstractFixer {

	public function fix(\SplFileInfo $file, $content) {
		$tokens = Tokens::fromCode($content);
		foreach ($tokens as $index => $token) {
			if ($token->getContent() !== 'is_integer') {
				continue;
			}

			$wrongTokens = array(T_FUNCTION, 359); // 359 = ->

			$prevIndex = $tokens->getPrevNonWhitespace($index);
			if (in_array($tokens[$prevIndex]->getId(), $wrongTokens, true)) {
				continue;
			}

			$next = $tokens->getNextMeaningfulToken($index);
			if ($tokens[$next]->getContent() !== '(') {
				continue;
			}

			// Don't use is_integer()
			$tokens[$index]->setContent('is_int');
		}

		return $tokens->generateCode();
	}

	public function getLevel() {
		return 0;
	}

	public function getDescription() {
		return 'Use short form is_int() instead of is_integer().';
	}

}

class ShortCastFixer extends Symfony\CS\Fixer\Symfony\SpacesCastFixer {

	public function fix(\SplFileInfo $file, $content) {
		static $insideCastSpaceReplaceMap = array(
			' '	=> '',
			"\t"   => '',
			"\n"   => '',
			"\r"   => '',
			"\0"   => '',
			"\x0B" => '',
		);

		static $matching = array(
			'(boolean)' => '(bool)',
			'(integer)' => '(int)',
		);

		$tokens = Tokens::fromCode($content);
		foreach ($tokens as $index => $token) {
			// Don't use !!
			if ($token->getContent() === '!' && $tokens[$index - 1]->getContent() === '!') {
				$tokens[$index - 1]->setContent('');
				$tokens[$index]->setContent('(bool)');
				continue;
			}

			// Don't use long form
			if ($token->isCast()) {
				$content = $token->getContent();
				$key = strtolower($content);

				if (isset($matching[$key])) {
					$tokens[$index]->setContent($matching[$key]);
				}
			}
		}
		return $tokens->generateCode();
	}

	public function getLevel() {
		return 0;
	}

	public function getDescription() {
		return 'Use short forms (bool) and (int) for casts and do not use !!.';
	}

}

class NoSpacesCastFixer extends Symfony\CS\Fixer\Symfony\SpacesCastFixer {

	public function fix(\SplFileInfo $file, $content) {
		static $insideCastSpaceReplaceMap = array(
			' '	=> '',
			"\t"   => '',
			"\n"   => '',
			"\r"   => '',
			"\0"   => '',
			"\x0B" => '',
		);
		$tokens = Tokens::fromCode($content);
		foreach ($tokens as $index => $token) {
			if ($token->isCast()) {
				$token->setContent(strtr($token->getContent(), $insideCastSpaceReplaceMap));
				// force single whitespace after cast token:
				if ($tokens[$index + 1]->isWhitespace(array('whitespaces' => " \t"))) {
					// - if next token is whitespaces that contains only spaces and tabs - override next token with single space
					$tokens[$index + 1]->setContent('');
				} elseif (!$tokens[$index + 1]->isWhitespace()) {
					// - if next token is not whitespaces that contains spaces, tabs and new lines - append single space to current token
					$tokens->insertAt($index + 1, new Token(''));
				}
			}
		}
		return $tokens->generateCode();
	}

	public function getLevel() {
		return 0;
	}

	public function getDescription() {
		return 'No whitespace should be between cast and variable.';
	}

}

class UseTabsFixer extends Symfony\CS\Fixer\PSR2\IndentationFixer {

	public function fix(\SplFileInfo $file, $content) {
		return preg_replace_callback('/^([\t| ]{4,})/m', function ($matches) use ($content) {
			$result = str_replace(str_repeat(' ', 4), "\t", $matches[0]);
			$result = str_replace(str_repeat(' ', 2), "", $result);
			return $result;
		}, $content);
	}

	public function getLevel() {
		return 0;
	}

	public function getDescription() {
		return 'Code must use tabs for indenting.';
	}

	public function getPriority() {
		// Should be run after the ElseIfFixer and DuplicateSemicolonFixer
		return -99;
	}
}

class ConsistentBracesFixer extends Symfony\CS\Fixer\PSR2\BracesFixer {

	/**
	 * {@inheritdoc}
	 */
	public function fix(\SplFileInfo $file, $content)
	{
		$tokens = Tokens::fromCode($content);

		$this->fixCommentBeforeBrace($tokens);
		$this->fixMissingControlBraces($tokens);
		$this->fixIndents($tokens);
		$this->fixControlContinuationBraces($tokens);
		$this->fixSpaceAroundToken($tokens);
		$this->fixDoWhile($tokens);
		$this->fixLambdas($tokens);

		return $tokens->generateCode();
	}

   private function fixCommentBeforeBrace(Tokens $tokens)
	{
		$controlTokens = $this->getControlTokens();

		for ($index = $tokens->count() - 1; 0 <= $index; --$index) {
			$token = $tokens[$index];

			if (!$token->isGivenKind($controlTokens)) {
				continue;
			}

			$parenthesisEndIndex = $this->findParenthesisEnd($tokens, $index);
			$afterParenthesisIndex = $tokens->getNextNonWhitespace($parenthesisEndIndex);
			$afterParenthesisToken = $tokens[$afterParenthesisIndex];

			if (!$afterParenthesisToken->isComment()) {
				continue;
			}

			$afterCommentIndex = $tokens->getNextMeaningfulToken($afterParenthesisIndex);
			$afterCommentToken = $tokens[$afterCommentIndex];

			if (!$afterCommentToken->equals('{')) {
				continue;
			}

			$tokenTmp = $tokens[$afterCommentIndex];
			$tokens[$afterCommentIndex - 1]->setContent(rtrim($tokens[$afterCommentIndex - 1]->getContent()));

			for ($i = $afterCommentIndex; $i > $afterParenthesisIndex; --$i) {
				$tokens[$i] = $tokens[$i - 1];
			}

			$tokens[$afterParenthesisIndex] = $tokenTmp;
		}
	}

	private function fixControlContinuationBraces(Tokens $tokens)
	{
		$controlContinuationTokens = $this->getControlContinuationTokens();

		for ($index = count($tokens) - 1; 0 <= $index; --$index) {
			$token = $tokens[$index];

			if (!$token->isGivenKind($controlContinuationTokens)) {
				continue;
			}

			$prevIndex = $tokens->getPrevNonWhitespace($index);
			$prevToken = $tokens[$prevIndex];

			if (!$prevToken->equals('}')) {
				continue;
			}

			$tokens->ensureWhitespaceAtIndex($index - 1, 1, ' ');
		}
	}

	private function fixDoWhile(Tokens $tokens)
	{
		for ($index = count($tokens) - 1; 0 <= $index; --$index) {
			$token = $tokens[$index];

			if (!$token->isGivenKind(T_DO)) {
				continue;
			}

			$parenthesisEndIndex = $this->findParenthesisEnd($tokens, $index);
			$startBraceIndex = $tokens->getNextNonWhitespace($parenthesisEndIndex);
			$endBraceIndex = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $startBraceIndex);
			$nextNonWhitespaceIndex = $tokens->getNextNonWhitespace($endBraceIndex);
			$nextNonWhitespaceToken = $tokens[$nextNonWhitespaceIndex];

			if (!$nextNonWhitespaceToken->isGivenKind(T_WHILE)) {
				continue;
			}

			$tokens->ensureWhitespaceAtIndex($nextNonWhitespaceIndex - 1, 1, ' ');
		}
	}

	private function fixIndents(Tokens $tokens)
	{
		$classyTokens = $this->getClassyTokens();
		$classyAndFunctionTokens = array_merge(array(T_FUNCTION), $classyTokens);
		$controlTokens = $this->getControlTokens();
		$indentTokens = array_filter(
			array_merge($classyAndFunctionTokens, $controlTokens),
			function ($item) {
				return T_SWITCH !== $item;
			}
		);

		for ($index = 0, $limit = count($tokens); $index < $limit; ++$index) {
			$token = $tokens[$index];

			// if token is not a structure element - continue
			if (!$token->isGivenKind($indentTokens)) {
				continue;
			}

			// do not change indent for lambda functions
			if ($token->isGivenKind(T_FUNCTION) && $tokens->isLambda($index)) {
				continue;
			}

			if ($token->isGivenKind($classyAndFunctionTokens)) {
				$startBraceIndex = $tokens->getNextTokenOfKind($index, array(';', '{'));
				$startBraceToken = $tokens[$startBraceIndex];
			} else {
				$parenthesisEndIndex = $this->findParenthesisEnd($tokens, $index);
				$startBraceIndex = $tokens->getNextNonWhitespace($parenthesisEndIndex);
				$startBraceToken = $tokens[$startBraceIndex];
			}

			// structure without braces block - nothing to do, e.g. do { } while (true);
			if (!$startBraceToken->equals('{')) {
				continue;
			}

			$endBraceIndex = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $startBraceIndex);

			$indent = $this->detectIndent($tokens, $index);

			// fix indent near closing brace
			//FIX but only for non-class?
			$tokens->ensureWhitespaceAtIndex($endBraceIndex - 1, 1, "\n");

			// fix indent between braces
			$lastCommaIndex = $tokens->getPrevTokenOfKind($endBraceIndex - 1, array(';', '}'));

			$nestLevel = 1;
			for ($nestIndex = $lastCommaIndex; $nestIndex >= $startBraceIndex; --$nestIndex) {
				$nestToken = $tokens[$nestIndex];

				if ($nestToken->equals(')')) {
					$nestIndex = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $nestIndex, false);
					continue;
				}

				if (1 === $nestLevel && $nestToken->equalsAny(array(';', '}'))) {
					$nextNonWhitespaceNestToken = $tokens[$tokens->getNextNonWhitespace($nestIndex)];

					if (
						// next Token is not a comment
						!$nextNonWhitespaceNestToken->isComment() &&
						// and it is not a `$foo = function () {};` situation
						!($nestToken->equals('}') && $nextNonWhitespaceNestToken->equalsAny(array(';', ',', ']'))) &&
						// and it is not a `${"a"}->...` and `${"b{$foo}"}->...` situation
						!($nestToken->equals('}') && $tokens[$nestIndex - 1]->equalsAny(array('"', "'", array(T_CONSTANT_ENCAPSED_STRING))))
					) {
						if ($nextNonWhitespaceNestToken->isGivenKind($this->getControlContinuationTokens())) {
							$whitespace = ' ';
						} else {
							$nextToken = $tokens[$nestIndex + 1];
							$nextWhitespace = '';

							if ($nextToken->isWhitespace()) {
								$nextWhitespace = rtrim($nextToken->getContent(), " \t");

								if (strlen($nextWhitespace) && "\n" === $nextWhitespace[strlen($nextWhitespace) - 1]) {
									$nextWhitespace = substr($nextWhitespace, 0, -1);
								}
							}

							$whitespace = $nextWhitespace."\n".$indent;

							if (!$nextNonWhitespaceNestToken->equals('}')) {
								$whitespace .= '	';
							}
						}

						$tokens->ensureWhitespaceAtIndex($nestIndex + 1, 0, $whitespace);
					}
				}

				if ($nestToken->equals('}')) {
					++$nestLevel;
					continue;
				}

				if ($nestToken->equals('{')) {
					--$nestLevel;
					continue;
				}
			}

			// fix indent near opening brace
			if (isset($tokens[$startBraceIndex + 2]) && $tokens[$startBraceIndex + 2]->equals('}')) {
				$tokens->ensureWhitespaceAtIndex($startBraceIndex + 1, 0, "\n".$indent);
			} else {
				$nextToken = $tokens[$startBraceIndex + 1];
				$nextNonWhitespaceToken = $tokens[$tokens->getNextNonWhitespace($startBraceIndex)];

				// set indent only if it is not a case, when comment is following { in same line
				if (
					!$nextNonWhitespaceToken->isComment()
					|| !($nextToken->isWhitespace() && $nextToken->isWhitespace(array('whitespaces' => " \t")))
				) {
					$tokens->ensureWhitespaceAtIndex($startBraceIndex + 1, 0, "\n".$indent.'	');
				}
			}

			if ($token->isGivenKind($classyTokens)) {



				//FIX
				$prevIndex = $tokens->getPrevNonWhitespace($startBraceIndex);
				$tokens->removeTrailingWhitespace($prevIndex);
				$tokens->ensureWhitespaceAtIndex($startBraceIndex - 1, 1, ' ');
				//$tokens->ensureWhitespaceAtIndex($startBraceIndex - 1, 1, "\n".$indent);
				$tokens->ensureWhitespaceAtIndex($startBraceIndex, 1, "\n");

				$tokens->ensureWhitespaceAtIndex($endBraceIndex - 1, 1, "\n");

			} elseif ($token->isGivenKind(T_FUNCTION)) {
				$closingParenthesisIndex = $tokens->getPrevTokenOfKind($startBraceIndex, array(')'));
				$prevToken = $tokens[$closingParenthesisIndex - 1];

				if ($prevToken->isWhitespace() && false !== strpos($prevToken->getContent(), "\n")) {
					$tokens->ensureWhitespaceAtIndex($startBraceIndex - 1, 1, ' ');
				} else {
					//FIX
					$tokens->ensureWhitespaceAtIndex($startBraceIndex - 1, 1, $indent);
					//$tokens->ensureWhitespaceAtIndex($startBraceIndex - 1, 1, "\n".$indent);
				}
			} else {
				$tokens->ensureWhitespaceAtIndex($startBraceIndex - 1, 1, ' ');
			}

			// reset loop limit due to collection change
			$limit = count($tokens);
		}
	}

	private function fixLambdas(Tokens $tokens)
	{
		for ($index = $tokens->count() - 1; 0 <= $index; --$index) {
			$token = $tokens[$index];

			if (!$token->isGivenKind(T_FUNCTION) || !$tokens->isLambda($index)) {
				continue;
			}

			$nextIndex = $tokens->getNextTokenOfKind($index, array('{'));

			$tokens->ensureWhitespaceAtIndex($nextIndex - 1, 1, ' ');
		}
	}

	private function fixMissingControlBraces(Tokens $tokens)
	{
		$controlTokens = $this->getControlTokens();

		for ($index = $tokens->count() - 1; 0 <= $index; --$index) {
			$token = $tokens[$index];

			if (!$token->isGivenKind($controlTokens)) {
				continue;
			}

			$parenthesisEndIndex = $this->findParenthesisEnd($tokens, $index);
			$tokenAfterParenthesis = $tokens[$tokens->getNextMeaningfulToken($parenthesisEndIndex)];

			// if Token after parenthesis is { then we do not need to insert brace, but to fix whitespace before it
			if ($tokenAfterParenthesis->equals('{')) {
				$tokens->ensureWhitespaceAtIndex($parenthesisEndIndex + 1, 0, ' ');
				continue;
			}

			// do not add braces for cases:
			// - structure without block, e.g. while ($iter->next());
			// - structure with block, e.g. while ($i) {...}, while ($i) : {...} endwhile;
			if ($tokenAfterParenthesis->equalsAny(array(';', '{', ':'))) {
				continue;
			}

			$statementEndIndex = $this->findStatementEnd($tokens, $parenthesisEndIndex);

			// insert closing brace
			$tokens->insertAt($statementEndIndex + 1, array(new Token(array(T_WHITESPACE, ' ')), new Token('}')));

			// insert opening brace
			$tokens->removeTrailingWhitespace($parenthesisEndIndex);
			$tokens->insertAt($parenthesisEndIndex + 1, new Token('{'));
			$tokens->ensureWhitespaceAtIndex($parenthesisEndIndex + 1, 0, ' ');
		}
	}

	private function fixSpaceAroundToken(Tokens $tokens)
	{
		$controlTokens = $this->getControlTokens();

		for ($index = $tokens->count() - 1; 0 <= $index; --$index) {
			$token = $tokens[$index];

			if ($token->isGivenKind($controlTokens) || $token->isGivenKind(T_USE)) {
				$nextNonWhitespaceIndex = $tokens->getNextNonWhitespace($index);

				if (!$tokens[$nextNonWhitespaceIndex]->equals(':')) {
					$tokens->ensureWhitespaceAtIndex($index + 1, 0, ' ');
				}

				$prevToken = $tokens[$index - 1];

				if (!$prevToken->isWhitespace() && !$prevToken->isComment() && !$prevToken->isGivenKind(T_OPEN_TAG)) {
					$tokens->ensureWhitespaceAtIndex($index - 1, 1, ' ');
				}
			}
		}
	}

	private function detectIndent(Tokens $tokens, $index)
	{
		static $goBackTokens = array(T_ABSTRACT, T_FINAL, T_PUBLIC, T_PROTECTED, T_PRIVATE, T_STATIC);

		$token = $tokens[$index];

		if ($token->isGivenKind($goBackTokens) || $token->isClassy() || $token->isGivenKind(T_FUNCTION)) {
			$prevIndex = $tokens->getPrevNonWhitespace($index);
			$prevToken = $tokens[$prevIndex];

			if ($prevToken->isGivenKind($goBackTokens)) {
				return $this->detectIndent($tokens, $prevIndex);
			}
		}

		$prevIndex = $index - 1;
		$prevToken = $tokens[$prevIndex];

		if ($prevToken->equals('}')) {
			return $this->detectIndent($tokens, $prevIndex);
		}

		// if can not detect indent:
		if (!$prevToken->isWhitespace()) {
			return '';
		}

		$explodedContent = explode("\n", $prevToken->getContent());

		// proper decect indent for code: `	} else {`
		if (1 === count($explodedContent)) {
			if ($tokens[$index - 2]->equals('}')) {
				return $this->detectIndent($tokens, $index - 2);
			}
		}

		return end($explodedContent);
	}

	private function findParenthesisEnd(Tokens $tokens, $structureTokenIndex)
	{
		$nextIndex = $tokens->getNextNonWhitespace($structureTokenIndex);
		$nextToken = $tokens[$nextIndex];

		// return if next token is not opening parenthesis
		if (!$nextToken->equals('(')) {
			return $structureTokenIndex;
		}

		return $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $nextIndex);
	}

	private function findStatementEnd(Tokens $tokens, $parenthesisEndIndex)
	{
		$nextIndex = $tokens->getNextNonWhitespace($parenthesisEndIndex);
		$nextToken = $tokens[$nextIndex];

		if (!$nextToken) {
			return $parenthesisEndIndex;
		}

		if ($nextToken->equals('{')) {
			return $tokens->findBlockEnd(Tokens::BLOCK_TYPE_CURLY_BRACE, $nextIndex);
		}

		if ($nextToken->isGivenKind($this->getControlTokens())) {
			$parenthesisEndIndex = $this->findParenthesisEnd($tokens, $nextIndex);

			$endIndex = $this->findStatementEnd($tokens, $parenthesisEndIndex);

			if ($nextToken->isGivenKind(T_IF)) {
				$nextIndex = $tokens->getNextNonWhitespace($endIndex);
				$nextToken = $tokens[$nextIndex];

				if ($nextToken && $nextToken->isGivenKind($this->getControlContinuationTokens())) {
					$parenthesisEndIndex = $this->findParenthesisEnd($tokens, $nextIndex);

					return $this->findStatementEnd($tokens, $parenthesisEndIndex);
				}
			}

			return $endIndex;
		}

		$index = $parenthesisEndIndex;

		while (true) {
			$token = $tokens[++$index];

			if ($token->equals(';')) {
				break;
			}
		}

		return $index;
	}

	private function getClassyTokens()
	{
		static $tokens = null;

		if (null === $tokens) {
			$tokens = array(T_CLASS, T_INTERFACE);

			if (defined('T_TRAIT')) {
				$tokens[] = T_TRAIT;
			}
		}

		return $tokens;
	}

	private function getControlTokens()
	{
		static $tokens = null;

		if (null === $tokens) {
			$tokens = array(
				T_DECLARE,
				T_DO,
				T_ELSE,
				T_ELSEIF,
				T_FOR,
				T_FOREACH,
				T_IF,
				T_WHILE,
				T_TRY,
				T_CATCH,
				T_SWITCH,
			);

			if (defined('T_FINALLY')) {
				$tokens[] = T_FINALLY;
			}
		}

		return $tokens;
	}

	private function getControlContinuationTokens()
	{
		static $tokens = null;

		if (null === $tokens) {
			$tokens = array(
				T_ELSE,
				T_ELSEIF,
				T_CATCH,
			);

			if (defined('T_FINALLY')) {
				$tokens[] = T_FINALLY;
			}
		}

		return $tokens;
	}

	public function getLevel() {
		return 0;
	}

	public function getDescription() {
		return 'Code must use consistent brace style (opening parantheses always on the same line).';
	}

	public function getPriority() {
		// Should be run after the ElseIfFixer and DuplicateSemicolonFixer
		return -98;
	}

}